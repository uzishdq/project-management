// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int     @id @default(autoincrement())
  cognitoId         String  @unique
  username          String  @unique
  profilePictureUrl String?
  teamId            Int?

  team            Team?            @relation(fields: [teamId], references: [id])
  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  TaskAssignments TaskAssignment[]
  Attachments     Attachment[]
  Comments        Comment[]
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  ProjectTeam          ProjectTeam[]
  User                 User[]
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  ProjectTeam ProjectTeam[]
  Task        Task[]
}

model ProjectTeam {
  id        Int @id @default(autoincrement())
  teamId    Int
  projectId Int

  team    Team    @relation(fields: [teamId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   Int
  assignedUserId Int?

  project        Project          @relation(fields: [projectId], references: [id])
  author         User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee       User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  TaskAssignment TaskAssignment[]
  Attachment     Attachment[]
  Comment        Comment[]
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}
